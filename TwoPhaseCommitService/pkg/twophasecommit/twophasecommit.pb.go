// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: api/twophasecommit/v1/twophasecommit.proto

package twophasecommit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VoteResponse_Vote int32

const (
	VoteResponse_YES VoteResponse_Vote = 0
	VoteResponse_NO  VoteResponse_Vote = 1
)

// Enum value maps for VoteResponse_Vote.
var (
	VoteResponse_Vote_name = map[int32]string{
		0: "YES",
		1: "NO",
	}
	VoteResponse_Vote_value = map[string]int32{
		"YES": 0,
		"NO":  1,
	}
)

func (x VoteResponse_Vote) Enum() *VoteResponse_Vote {
	p := new(VoteResponse_Vote)
	*p = x
	return p
}

func (x VoteResponse_Vote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteResponse_Vote) Descriptor() protoreflect.EnumDescriptor {
	return file_api_twophasecommit_v1_twophasecommit_proto_enumTypes[0].Descriptor()
}

func (VoteResponse_Vote) Type() protoreflect.EnumType {
	return &file_api_twophasecommit_v1_twophasecommit_proto_enumTypes[0]
}

func (x VoteResponse_Vote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteResponse_Vote.Descriptor instead.
func (VoteResponse_Vote) EnumDescriptor() ([]byte, []int) {
	return file_api_twophasecommit_v1_twophasecommit_proto_rawDescGZIP(), []int{1, 0}
}

type PrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"` // Add other fields as needed
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_api_twophasecommit_v1_twophasecommit_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type VoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote VoteResponse_Vote `protobuf:"varint,1,opt,name=vote,proto3,enum=twophasecommit.VoteResponse_Vote" json:"vote,omitempty"`
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_api_twophasecommit_v1_twophasecommit_proto_rawDescGZIP(), []int{1}
}

func (x *VoteResponse) GetVote() VoteResponse_Vote {
	if x != nil {
		return x.Vote
	}
	return VoteResponse_YES
}

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"` // Add other fields as needed
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_api_twophasecommit_v1_twophasecommit_proto_rawDescGZIP(), []int{2}
}

func (x *CommitRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_api_twophasecommit_v1_twophasecommit_proto_rawDescGZIP(), []int{3}
}

func (x *AckResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_api_twophasecommit_v1_twophasecommit_proto protoreflect.FileDescriptor

var file_api_twophasecommit_v1_twophasecommit_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x77,
	0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x36, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x17, 0x0a, 0x04, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x4f, 0x10, 0x01, 0x22, 0x35, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0b, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x32, 0xa3, 0x01, 0x0a, 0x0e, 0x54, 0x77, 0x6f, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x74,
	0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x77,
	0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x74, 0x77, 0x6f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_twophasecommit_v1_twophasecommit_proto_rawDescOnce sync.Once
	file_api_twophasecommit_v1_twophasecommit_proto_rawDescData = file_api_twophasecommit_v1_twophasecommit_proto_rawDesc
)

func file_api_twophasecommit_v1_twophasecommit_proto_rawDescGZIP() []byte {
	file_api_twophasecommit_v1_twophasecommit_proto_rawDescOnce.Do(func() {
		file_api_twophasecommit_v1_twophasecommit_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_twophasecommit_v1_twophasecommit_proto_rawDescData)
	})
	return file_api_twophasecommit_v1_twophasecommit_proto_rawDescData
}

var file_api_twophasecommit_v1_twophasecommit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_twophasecommit_v1_twophasecommit_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_twophasecommit_v1_twophasecommit_proto_goTypes = []interface{}{
	(VoteResponse_Vote)(0), // 0: twophasecommit.VoteResponse.Vote
	(*PrepareRequest)(nil), // 1: twophasecommit.PrepareRequest
	(*VoteResponse)(nil),   // 2: twophasecommit.VoteResponse
	(*CommitRequest)(nil),  // 3: twophasecommit.CommitRequest
	(*AckResponse)(nil),    // 4: twophasecommit.AckResponse
}
var file_api_twophasecommit_v1_twophasecommit_proto_depIdxs = []int32{
	0, // 0: twophasecommit.VoteResponse.vote:type_name -> twophasecommit.VoteResponse.Vote
	1, // 1: twophasecommit.TwoPhaseCommit.Prepare:input_type -> twophasecommit.PrepareRequest
	3, // 2: twophasecommit.TwoPhaseCommit.Commit:input_type -> twophasecommit.CommitRequest
	2, // 3: twophasecommit.TwoPhaseCommit.Prepare:output_type -> twophasecommit.VoteResponse
	4, // 4: twophasecommit.TwoPhaseCommit.Commit:output_type -> twophasecommit.AckResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_twophasecommit_v1_twophasecommit_proto_init() }
func file_api_twophasecommit_v1_twophasecommit_proto_init() {
	if File_api_twophasecommit_v1_twophasecommit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_twophasecommit_v1_twophasecommit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_twophasecommit_v1_twophasecommit_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_twophasecommit_v1_twophasecommit_proto_goTypes,
		DependencyIndexes: file_api_twophasecommit_v1_twophasecommit_proto_depIdxs,
		EnumInfos:         file_api_twophasecommit_v1_twophasecommit_proto_enumTypes,
		MessageInfos:      file_api_twophasecommit_v1_twophasecommit_proto_msgTypes,
	}.Build()
	File_api_twophasecommit_v1_twophasecommit_proto = out.File
	file_api_twophasecommit_v1_twophasecommit_proto_rawDesc = nil
	file_api_twophasecommit_v1_twophasecommit_proto_goTypes = nil
	file_api_twophasecommit_v1_twophasecommit_proto_depIdxs = nil
}
