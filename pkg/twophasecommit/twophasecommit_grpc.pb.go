// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package twophasecommit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwoPhaseCommitClient is the client API for TwoPhaseCommit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoPhaseCommitClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type twoPhaseCommitClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoPhaseCommitClient(cc grpc.ClientConnInterface) TwoPhaseCommitClient {
	return &twoPhaseCommitClient{cc}
}

func (c *twoPhaseCommitClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/twophasecommit.TwoPhaseCommit/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/twophasecommit.TwoPhaseCommit/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoPhaseCommitServer is the server API for TwoPhaseCommit service.
// All implementations must embed UnimplementedTwoPhaseCommitServer
// for forward compatibility
type TwoPhaseCommitServer interface {
	Prepare(context.Context, *PrepareRequest) (*VoteResponse, error)
	Commit(context.Context, *CommitRequest) (*AckResponse, error)
	mustEmbedUnimplementedTwoPhaseCommitServer()
}

// UnimplementedTwoPhaseCommitServer must be embedded to have forward compatible implementations.
type UnimplementedTwoPhaseCommitServer struct {
}

func (UnimplementedTwoPhaseCommitServer) Prepare(context.Context, *PrepareRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedTwoPhaseCommitServer) Commit(context.Context, *CommitRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTwoPhaseCommitServer) mustEmbedUnimplementedTwoPhaseCommitServer() {}

// UnsafeTwoPhaseCommitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoPhaseCommitServer will
// result in compilation errors.
type UnsafeTwoPhaseCommitServer interface {
	mustEmbedUnimplementedTwoPhaseCommitServer()
}

func RegisterTwoPhaseCommitServer(s grpc.ServiceRegistrar, srv TwoPhaseCommitServer) {
	s.RegisterService(&TwoPhaseCommit_ServiceDesc, srv)
}

func _TwoPhaseCommit_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twophasecommit.TwoPhaseCommit/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommit_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twophasecommit.TwoPhaseCommit/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoPhaseCommit_ServiceDesc is the grpc.ServiceDesc for TwoPhaseCommit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoPhaseCommit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twophasecommit.TwoPhaseCommit",
	HandlerType: (*TwoPhaseCommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _TwoPhaseCommit_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TwoPhaseCommit_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/twophasecommit/v1/twophasecommit.proto",
}
